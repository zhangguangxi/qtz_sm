<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qtz.sm.supermarket.dao.SupermarketCategoryAssociateDao">
	<!-- Result Map com.qtz.sm.supermarket.vo.SupermarketCategoryAssociate -->
	<resultMap id="BaseResultMap" type="SupermarketCategoryAssociate">
		<result column="dmId" property="dmId" />
		<result column="supermarket_category_id" property="supermarketCategoryId" />
		<result column="goods_category_id" property="goodsCategoryId" />

	</resultMap>

	<resultMap id="SupermarketCategoryAssociateResult" type="SupermarketCategoryAssociate"
		extends="BaseResultMap">
		<result column="goods_category_name" property="goodsCategoryName" />
	</resultMap>

	<resultMap id="SupermarketCategoryGoodsResult" type="SupermarketCategoryGoods">
		<result column="goodsId" property="dmId" />
		<result column="goodsName" property="goodsName" />
		<result column="pictureUrl" property="pictureUrl" />
		<result column="price" property="price" />
	</resultMap>

	<!-- supermarket_category_associate table all fields -->
	<sql id="Base_Column_List">
		t.dmId,t.supermarket_category_id,t.goods_category_id
	</sql>

	<!-- 查询条件 -->
	<sql id="Example_Where_Clause">
		<where>
			<if test="dmId != null  ">
				and t.dmId=#{dmId}
			</if>
			<if test="supermarketCategoryId != null  ">
				and t.supermarket_category_id=#{supermarketCategoryId}
			</if>
			<if test="goodsCategoryId != null  ">
				and t.goods_category_id=#{goodsCategoryId}
			</if>

		</where>
	</sql>
	<!-- 查询条件(超市二级商品分类id) -->
	<sql id="SupermarketCategoryId_Where_Clause">
		<where>
			<if test="dmId != null  ">
				and sc.dmId=#{dmId}
			</if>
			<if test="pid != null">
				and sc.pid = #{pid}
			</if>
		</where>
	</sql>


	<!-- 插入记录 [说明：如果要返回当前对象，需要如下配置：<insert id="addVo" parameterType="Object" 
		useGeneratedKeys="true" keyProperty="id">] -->
	<insert id="addVo" parameterType="Object">
		insert into
		supermarket_category_associate(dmId,supermarket_category_id,goods_category_id)
		values(#{dmId},#{supermarketCategoryId},#{goodsCategoryId})
	</insert>
	<!--批量插入记录 -->
	<insert id="addList" parameterType="java.util.List">
		insert into
		supermarket_category_associate(dmId,supermarket_category_id,goods_category_id)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(
			#{item.dmId},#{item.supermarketCategoryId},#{item.goodsCategoryId}
			)
		</foreach>
	</insert>


	<!-- 删除记录 -->
	<delete id="delId" parameterType="Object">
		delete from
		supermarket_category_associate where dmId = #{dmId}
	</delete>
	<!--批量删除 -->
	<delete id="delIds" parameterType="java.lang.String">
		delete from supermarket_category_associate where dmId in
		<foreach item="idItem" collection="array" open="(" separator=","
			close=")">
			#{idItem}
		</foreach>
	</delete>
	<!--批量删除 -->
	<delete id="delList" parameterType="java.util.List">
		delete from supermarket_category_associate where dmId in
		<foreach item="idItem" collection="list" index="index" open="("
			separator="," close=")">
			#{idItem}
		</foreach>
	</delete>
	<!-- 删除2级超市分类关联的商品ID -->
	<delete id="delByCategoryId" parameterType="Object">
		delete from
		supermarket_category_associate where supermarket_category_id =
		#{supermarketCategoryId}
	</delete>

	<!-- 根据id，修改记录 -->
	<update id="modVo" parameterType="Object">
		update
		supermarket_category_associate set
		supermarket_category_id=#{supermarketCategoryId},goods_category_id=#{goodsCategoryId}
		where dmId=#{dmId}
	</update>
	<!-- 修改记录，只修改只不为空的字段 -->
	<update id="modVoNotNull" parameterType="Object">
		update supermarket_category_associate set
		<trim suffixOverrides=",">
			<if test="supermarketCategoryId != null  ">
				supermarket_category_id=#{supermarketCategoryId},
			</if>
			<if test="goodsCategoryId != null  ">
				goods_category_id=#{goodsCategoryId},
			</if>
		</trim>
		where dmId=#{dmId}
	</update>



	<!-- 根据id查询 超市类目与商品类目关联表 -->
	<select id="findVo" resultMap="BaseResultMap" parameterType="Object">
		select
		<include refid="Base_Column_List" />
		from supermarket_category_associate t where t.dmId = #{dmId}
	</select>

	<!-- 超市类目与商品类目关联表 列表总数 -->
	<select id="queryCount" resultType="java.lang.Integer"
		parameterType="Object">
		select count(1) from supermarket_category_associate t
		<include refid="Example_Where_Clause" />
	</select>

	<!-- 分页查询超市类目与商品类目关联表列表 -->
	<select id="queryList" resultMap="BaseResultMap" parameterType="Object">
		select
		<include refid="Base_Column_List" />
		from supermarket_category_associate t
		<include refid="Example_Where_Clause" />

		<if test="orderCondition != null and orderCondition != ''">
			${orderCondition}
		</if>
		<if test="mysqlQueryCondition != null and mysqlQueryCondition != ''">
			${mysqlQueryCondition}
		</if>
	</select>

	<!-- 查询超市类目与商品类目关联表列表 -->
	<select id="findList" resultMap="BaseResultMap" parameterType="Object">
		select
		<include refid="Base_Column_List" />
		from supermarket_category_associate t
		<include refid="Example_Where_Clause" />
	</select>

	<!-- 根据超市ID 查询已经关联的商品分类 -->
	<select id="getList" resultMap="BaseResultMap" parameterType="Object">
		select
		<include refid="Base_Column_List" />
		from supermarket_category a ,supermarket_category_associate t
		where
		a.dmId = t.supermarket_category_id and a.supermarket_id =
		#{supermarketId}
		and t.goods_category_id = #{goodsCategoryId}
	</select>



	<!--通过超市分类ID查询关联商品分类信息 -->
	<select id="queryBySupermarketCategoryId" parameterType="long"
		resultMap="SupermarketCategoryAssociateResult">
		SELECT sca.dmId, sca.supermarket_category_id,
		sca.goods_category_id,
		gdt.`name` as goods_category_name
		FROM
		supermarket_category_associate
		sca
		LEFT JOIN gd_goods_type gdt ON
		sca.goods_category_id = gdt.dmId
		WHERE sca.supermarket_category_id =
		#{supermarketCategoryId}
		<!-- 根据级别排序避免出现分类级别混乱 -->
		ORDER BY gdt.`level`
	</select>
	<!-- 通过超市二级分类ID查询商品列表(商品id、图片url、价格) -->
	<select id="findGoodsList"
		parameterType="Object" resultMap="SupermarketCategoryGoodsResult">
		SELECT
				t1.goods_id AS goodsId,
				t1.goods_name AS goodsName,
				gp2.pic_url AS pictureUrl,
				t2.price AS price,
				fn_get_cczx_id(#{latitude},#{longitude}) cczxId
		FROM
		(
		SELECT
		gt1.dmId AS goods_id,
		gt1. NAME AS goods_name,
		MIN(gp1.dmId) AS imgId
		FROM
		`gd_goods` gt1
		INNER JOIN `gd_goods_picture` gp1 ON gp1.goods_id = gt1.dmId
		GROUP
		BY
		gt1.dmId
		) t1
		INNER JOIN gd_goods_picture gp2 ON gp2.dmId = t1.imgId
		INNER JOIN (
		SELECT
		gt2.dmId AS goods_id,
		GROUP_CONCAT(gs.dmId) AS skuIds,
		MIN(
		`fn_get_rate_price` (3, gs.dmId)
		) AS price
		FROM
		`gd_goods` gt2
		INNER JOIN `gd_goods_sku` gs ON gs.goods_id = gt2.dmId
		INNER JOIN `cs_cczx_stock` cs ON cs.sku_id = gs.dmId
		WHERE
		cczx_id = #{cczxId}
		AND stock_quantity > 0
		GROUP BY
		gt2.dmId
		) t2 ON t2.goods_id = t1.goods_id
		WHERE
		t2.goods_id IN (
		SELECT
		gt3.dmId
		FROM
		gd_goods gt3
		WHERE
		gt3.goods_type_id IN (
		SELECT
		sca.goods_category_id
		FROM
		supermarket_category_associate sca
		INNER JOIN gd_goods_type gdt ON sca.goods_category_id = gdt.dmId
		WHERE
		sca.supermarket_category_id  in (select  sc.dmId  from supermarket_category sc 
			<include refid="SupermarketCategoryId_Where_Clause" />
		)
		)
		)
		<if test="condition != null and condition != ''">
			${condition}
		</if>
	</select>
	
		<!-- 通过超市二级分类ID查询商品数量(商品id、图片url、价格) -->
	<select id="findGoodsCount" parameterType="Object" resultType="java.lang.Integer" >
		SELECT
			count(1)
		FROM
		(
		SELECT
		gt1.dmId AS goods_id,
		gt1. NAME AS goods_name,
		MIN(gp1.dmId) AS imgId
		FROM
		`gd_goods` gt1
		INNER JOIN `gd_goods_picture` gp1 ON gp1.goods_id = gt1.dmId
		GROUP
		BY
		gt1.dmId
		) t1
		INNER JOIN gd_goods_picture gp2 ON gp2.dmId = t1.imgId
		INNER JOIN (
		SELECT
		gt2.dmId AS goods_id,
		GROUP_CONCAT(gs.dmId) AS skuIds,
		MIN(
		`fn_get_rate_price` (3, gs.dmId)
		) AS price
		FROM
		`gd_goods` gt2
		INNER JOIN `gd_goods_sku` gs ON gs.goods_id = gt2.dmId
		INNER JOIN `cs_cczx_stock` cs ON cs.sku_id = gs.dmId
		WHERE
		cczx_id = #{cczxId}
		AND stock_quantity > 0
		GROUP BY
		gt2.dmId
		) t2 ON t2.goods_id = t1.goods_id
		WHERE
		t2.goods_id IN (
		SELECT
		gt3.dmId
		FROM
		gd_goods gt3
		WHERE
		gt3.goods_type_id IN (
		SELECT
		sca.goods_category_id
		FROM
		supermarket_category_associate sca
		INNER JOIN gd_goods_type gdt ON sca.goods_category_id = gdt.dmId
		WHERE
		sca.supermarket_category_id  in (select  sc.dmId  from supermarket_category sc 
			<include refid="SupermarketCategoryId_Where_Clause" />
		)
		)
		)
	</select>
	
	
</mapper>